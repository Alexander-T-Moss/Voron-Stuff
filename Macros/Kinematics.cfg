[gcode_macro CG28]
# Required Macros: CONSOLE_MESSAGE
description: Conditional G28
gcode:

    # Check if printer is homed
    {% if "xyz" not in printer.toolhead.homed_axes %} 
        CONSOLE_MESSAGE MSG="Homing printer"
        G28

    {% else %}
        CONSOLE_MESSAGE MSG="Printer already homed"

    {% endif %}



[gcode_macro CQGL]
# Required Macros: CG28, CENTRE_XY, CONSOLE_MESSAGE
description: Conditional QGL
gcode:

    # Conditionally home
    CG28
    {% if printer.quad_gantry_level.applied == False %}
        CONSOLE_MESSAGE MSG="Levelling gantry"
        QUAD_GANTRY_LEVEL
        CENTRE_XY

    {% else %}
        CONSOLE_MESSAGE MSG="Gantry already levelled"

    {% endif %}



[gcode_macro CENTRE_XY]
# Required Macros: CG28
description: Move toolhead to centre of printer
gcode:

    # Set parameters & variables
    {% set hop = params.HOP|default(0)|int %}
    {% set speed = 2/3*printer.configfile.settings.printer.max_velocity %}

    # Conditionally home
    CG28

    # Move toolead up
    {% if hop > 0 %}
        G91
        G0 Z{hop} F1800
        G90
    {% endif %}

    # Move toolhead to centre of printer
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} F{speed*60}



[gcode_macro PARK_TOOLHEAD]
# Required Macros: CG28
description: Move toolhead to park position
gcode:

    # Set variables
    {% set offset = params.OFFSET|default(5)|int %}
    {% set hop = params.HOP|default(20)|int %}
    {% set speed = 2/3*printer.configfile.settings.printer.max_velocity %}

    # Conditional homing
    CG28

    # Move toolhead up
    {% if hop > 0 %}
        G91
        G0 Z{hop}
        G90
    {% endif %}

    # Move toolhead to park position
    G0 X{printer.toolhead.axis_maximum.x - offset} Y{printer.toolhead.axis_maximum.y - offset} F{speed*60}



[gcode_macro LARGE_PATTERN]
# Required Macros: None
description: Moves toolhead around the whole print area
gcode:

    # Bounding inset (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
    {% set bound = params.BOUND|default(20)|int %}

    # Set speed parameter
    {% set speed = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}

    # Max positions, inset by BOUND
    {% set x_min = printer.toolhead.axis_minimum.x + bound %}
    {% set x_max = printer.toolhead.axis_maximum.x - bound %}
    {% set y_min = printer.toolhead.axis_minimum.y + bound %}
    {% set y_max = printer.toolhead.axis_maximum.y - bound %}

    # Diagonals
    G0 X{x_min} Y{y_min} F{speed*60}
    G0 X{x_max} Y{y_max} F{speed*60}
    G0 X{x_min} Y{y_min} F{speed*60}
    G0 X{x_max} Y{y_min} F{speed*60}
    G0 X{x_min} Y{y_max} F{speed*60}
    G0 X{x_max} Y{y_min} F{speed*60}
    
    # Box
    G0 X{x_min} Y{y_min} F{speed*60}
    G0 X{x_min} Y{y_max} F{speed*60}
    G0 X{x_max} Y{y_max} F{speed*60}
    G0 X{x_max} Y{y_min} F{speed*60}



[gcode_macro SMALL_PATTERN]
# Required Macros: None
description: Moves toolhead around the centre of the print area
gcode:

    # Set speed parameter
    {% set speed = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}

    # Size for small pattern box
    {% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}

    # Find X/Y center point
    {% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
    {% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
    
    # Set small pattern box around center point
    {% set x_center_min = x_center - (smallpatternsize/2) %}
    {% set x_center_max = x_center + (smallpatternsize/2) %}
    {% set y_center_min = y_center - (smallpatternsize/2) %}
    {% set y_center_max = y_center + (smallpatternsize/2) %}

    # Small diagonals 
    G0 X{x_center_min} Y{y_center_min} F{speed*60}
    G0 X{x_center_max} Y{y_center_max} F{speed*60}
    G0 X{x_center_min} Y{y_center_min} F{speed*60}
    G0 X{x_center_max} Y{y_center_min} F{speed*60}
    G0 X{x_center_min} Y{y_center_max} F{speed*60}
    G0 X{x_center_max} Y{y_center_min} F{speed*60}
    
    # Small box
    G0 X{x_center_min} Y{y_center_min} F{speed*60}
    G0 X{x_center_min} Y{y_center_max} F{speed*60}
    G0 X{x_center_max} Y{y_center_max} F{speed*60}
    G0 X{x_center_max} Y{y_center_min} F{speed*60}